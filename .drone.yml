pipeline:
  identify:
    image: docker
    commands:
      # Grab the current version, prevents race conditions
      - apk add --no-cache curl jq
      # Hugbug, you really gotta fix this bro :(
      - set -o pipefail
      - curl -fL https://nzbget.netlify.com/info/nzbget-version-linux.json
            | sed 's/NZBGet.VersionInfo = //'
            | tee .nzbget_version_info
      - jq -r '.["stable-version"]' .nzbget_version_info > .nzbget_stable_ver
      - jq -r '.["stable-download"]' .nzbget_version_info > .nzbget_stable_url

  build:
    image: docker
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
    commands:
      - apk add --no-cache jq
      - docker build --no-cache --pull --build-arg NZBGET_URL=$(cat .nzbget_stable_url) -t nzbget-dev . 

  test:
    image: docker
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
    commands:
      - apk add --no-cache curl
      - CON_NAME=$(docker run --rm -d -p 6789:6789 --user=root nzbget-dev) # Need root for config
      - sleep 5  # Wait for NzbGet to start!
      - docker logs $$CON_NAME
      - curl -sSLu nzbget:tegbzn6789 --max-time 3 --retry 5 --retry-delay 5 $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $$CON_NAME):6789 > /dev/null
      - docker kill $$CON_NAME # Not really needed, but keeps things quick

  publish:
    image: docker
    secrets: [ DOCKER_USER, DOCKER_PASS ]
    when:
       event: [push, tag, deployment]
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
    commands:
       - echo $DOCKER_USER
       - docker tag nzbget-dev adamant/nzbget:latest
       - docker tag nzbget-dev adamant/nzbget:$(cat .nzbget_stable_ver)
       - docker login -u $DOCKER_USER -p $DOCKER_PASS
       - docker push adamant/nzbget
       - docker rmi nzbget-dev adamant/nzbget
       - echo "CONGRATS! SUCCESSFULLY BUILT NZBGET-STABLE!"
